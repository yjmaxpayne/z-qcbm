spec:
  templates:

  - name: generate-random-qcbm-params
    parent: generic-task
    inputs:
      parameters:
      - name: n-qubits
      - name: n-layers
        default: "2"
      - name: topology
        default: "all"
      - name: min-val
        default: "0."
      - name: max-val
        default: "1."
      - name: seed
        default: "None"
      - name: command
        value: python3 main_script.py
      artifacts:
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            from zquantum.qcbm.ansatz import generate_random_initial_params
            from zquantum.core.circuit import save_circuit_template_params
            n_qubits = {{inputs.parameters.n-qubits}}
            n_layers = {{inputs.parameters.n-layers}}
            topology = "{{inputs.parameters.topology}}"
            min_val = {{inputs.parameters.min-val}}
            max_val = {{inputs.parameters.max-val}}
            seed = {{inputs.parameters.seed}}
            parameters = generate_random_initial_params(n_qubits, n_layers=n_layers, 
                  topology=topology, min_val=min_val, max_val=max_val, seed=seed)
            save_circuit_template_params(parameters, "parameters.json")
    outputs:
      artifacts:
      - name: parameters
        path: /app/parameters.json
      

  - name: optimize-variational-qcbm-circuit
    parent: generic-task
    inputs:
      parameters:
      - name: n-qubits
      - name: n-layers
      - name: topology
        default: "all"
      - name: epsilon
      - name: distance-measure
        default: "clipped_log_likelihood"
      - name: backend-specs
      - name: optimizer-specs
      - name: command
        value: bash main_script.sh
      artifacts:
      - name: initial-parameters
        path: /app/initial-parameters.json
      - name: target-distribution
        path: /app/target-distribution.json
      - name: main-script
        path: /app/main_script.sh
        raw:
          data: |
            qvm -S &
            quilc -S &
            source /app/usr/local/bin/compilers_and_libraries.sh
            python3 python_script.py
      - name: python-script
        path: /app/python_script.py
        raw:
          data: |
            from zquantum.qcbm.cost_function import QCBMCostFunction
            from zquantum.qcbm.ansatz import get_qcbm_ansatz
            from zquantum.core.circuit import load_circuit_template_params, save_circuit_template_params
            from zquantum.core.utils import create_object
            from zquantum.optimizers.utils import save_optimization_results
            from zquantum.core.bitstring_distribution import load_bitstring_distribution
            n_qubits = {{inputs.parameters.n-qubits}}
            n_layers = {{inputs.parameters.n-layers}}
            topology = "{{inputs.parameters.topology}}"
            epsilon = {{inputs.parameters.epsilon}}
            distance_measure = "{{inputs.parameters.distance-measure}}"
            ansatz = get_qcbm_ansatz(n_qubits, n_layers, topology)
            backend_specs = {{inputs.parameters.backend-specs}}
            backend = create_object(backend_specs)
            optimizer_specs = {{inputs.parameters.optimizer-specs}}
            optimizer = create_object(optimizer_specs)
            initial_params = load_circuit_template_params("initial-parameters.json")
            target_distribution = load_bitstring_distribution("target-distribution.json")
            
            cost_function = QCBMCostFunction(ansatz, backend, distance_measure, target_distribution, epsilon)
            opt_results = optimizer.minimize(cost_function, initial_params)
            save_optimization_results(opt_results, "optimization-results.json")
            save_circuit_template_params(opt_results.opt_params, "optimized-parameters.json")
    outputs:
      artifacts:
      - name: optimization-results
        path: /app/optimization-results.json
      - name: optimized-parameters
        path: /app/optimized-parameters.json